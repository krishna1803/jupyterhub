name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy
    
    - name: Lint with ruff
      run: |
        ruff check .
        ruff format --check .
    
    - name: Type check with mypy
      run: |
        mypy jupyterhub_manager --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=jupyterhub_manager --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-api:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build API Docker image
      run: |
        docker build -f docker/Dockerfile.api -t jupyterhub-manager-api:${{ github.sha }} .
    
    - name: Test API container
      run: |
        docker run --rm -d --name test-api \
          -e JUPYTERHUB_MANAGER_JUPYTERHUB_URL=https://test.example.com \
          -e JUPYTERHUB_MANAGER_API_TOKEN=test-token \
          -p 8080:8080 \
          jupyterhub-manager-api:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-api

  build-ui:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build UI Docker image
      run: |
        docker build -f docker/Dockerfile.ui -t jupyterhub-manager-ui:${{ github.sha }} .

  release:
    needs: [test, build-api, build-ui]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
